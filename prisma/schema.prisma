// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(USER)
  empresaId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  empresa   Empresa?  @relation(fields: [empresaId], references: [id])

  clientes  Cliente[]
  contratos Contrato[]
  produtos  Produto[]
  servicos  Servico[]
  reunioes  Reuniao[]
  mensagens Mensagem[]
  demandas   Demanda[]
  despesas  Despesa[]
  despesasRecorrentes DespesaRecorrente[]
  contatos  Contato[]
  assinaturas Assinatura[]
  
  @@map("users")
}

model Empresa {
  id               String   @id @default(cuid())
  nome             String
  email            String   @unique
  telefone         String?
  endereco         String?
  cnpj             String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  usuarios         User[]
  clientes         Cliente[]
  contatos         Contato[]
  
  @@map("empresas")
}

model Cliente {
  id          String   @id @default(cuid())
  nome        String
  email       String   @unique
  telefone    String?
  endereco    String?
  cpfCnpj     String?
  empresaId   String?
  userId      String   // Quem cadastrou
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  empresa     Empresa? @relation(fields: [empresaId], references: [id])
  usuario     User     @relation(fields: [userId], references: [id])
  contratos   Contrato[]
  servicos    Servico[]
  produtos    Produto[]
  reunioes    Reuniao[]
  dominios    Dominio[]
  contatos    Contato[]
  assinaturas Assinatura[]
  demandas    Demanda[]
  
  @@map("clientes")
}

model Contrato {
  id          String   @id @default(cuid())
  numero      String?
  titulo      String
  descricao   String?
  valor       Float?
  dataInicio  DateTime?
  dataFim     DateTime?
  status      StatusContrato @default(ATIVO)
  clienteId   String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  cliente     Cliente @relation(fields: [clienteId], references: [id])
  usuario     User    @relation(fields: [userId], references: [id])
  assinaturas Assinatura[]
  
  @@map("contratos")
}

model Produto {
  id          String   @id @default(cuid())
  nome        String
  descricao   String?
  preco       Float?
  categoria   String?
  empresaId   String?
  clienteId   String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  cliente     Cliente? @relation(fields: [clienteId], references: [id])
  usuario     User     @relation(fields: [userId], references: [id])
  
  @@map("produtos")
}

model Servico {
  id          String   @id @default(cuid())
  nome        String
  descricao   String?
  preco       Float?
  clienteId   String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  cliente     Cliente? @relation(fields: [clienteId], references: [id])
  usuario     User     @relation(fields: [userId], references: [id])
  demandas    Demanda[]
  @@map("servicos")
}

model Demanda {
  id          String        @id @default(cuid())
  titulo      String
  descricao   String?
  prioridade  Prioridade    @default(MEDIA)
  status      StatusDemanda @default(ABERTA)
  servicoId   String
  clienteId   String?
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  servico     Servico       @relation(fields: [servicoId], references: [id])
  cliente     Cliente?      @relation(fields: [clienteId], references: [id])
  usuario     User          @relation(fields: [userId], references: [id])

  @@map("demandas")
}

model Reuniao {
  id          String   @id @default(cuid())
  titulo      String
  descricao   String?
  dataHora    DateTime
  local       String?
  clienteId   String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  cliente     Cliente? @relation(fields: [clienteId], references: [id])
  usuario     User     @relation(fields: [userId], references: [id])
  
  @@map("reunioes")
}

model Mensagem {
  id        String        @id @default(cuid())
  conteudo  String
  tipo      TipoMensagem  @default(TEXTO)
  userId    String
  createdAt DateTime      @default(now())

  usuario   User          @relation(fields: [userId], references: [id])

  @@map("mensagens")
}

model Despesa {
  id          String   @id @default(cuid())
  descricao   String
  valor       Float
  categoria   String?
  data        DateTime @default(now())
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  usuario     User @relation(fields: [userId], references: [id])
  
  @@map("despesas")
}

model DespesaRecorrente {
  id          String   @id @default(cuid())
  nome        String
  valor       Float
  dia         Int      // Dia do mês
  anual       Boolean  @default(false)
  mes         Int?     // Se anual = true
  status      StatusRecorrencia @default(ATIVA)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  usuario     User @relation(fields: [userId], references: [id])
  
  @@map("despesas_recorrentes")
}

model Dominio {
  id          String   @id @default(cuid())
  nome        String   @unique
  dominio     String
  clienteId   String?  // Cliente associado ao domínio
  createdAt   DateTime @default(now())
  
  // Relations
  cliente     Cliente? @relation(fields: [clienteId], references: [id])
  
  @@map("dominios")
}

model Contato {
  id        String   @id @default(cuid())
  nome      String
  email     String?
  telefone  String?
  cargo     String?
  clienteId String?
  empresaId String?
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cliente   Cliente? @relation(fields: [clienteId], references: [id])
  empresa   Empresa? @relation(fields: [empresaId], references: [id])
  usuario   User?    @relation(fields: [userId], references: [id])

  @@map("contatos")
}

model Plano {
  id        String      @id @default(cuid())
  nome      String
  descricao String?
  preco     Float
  ciclo     PlanoCiclo  @default(MENSAL)
  status    StatusPlano @default(ATIVO)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  assinaturas Assinatura[]

  @@map("planos")
}

model Assinatura {
  id          String            @id @default(cuid())
  clienteId   String
  planoId     String
  contratoId  String?
  userId      String?
  valor       Float?
  dataInicio  DateTime          @default(now())
  dataFim     DateTime?
  status      StatusAssinatura  @default(ATIVA)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  cliente     Cliente           @relation(fields: [clienteId], references: [id])
  plano       Plano             @relation(fields: [planoId], references: [id])
  contrato    Contrato?         @relation(fields: [contratoId], references: [id])
  usuario     User?             @relation(fields: [userId], references: [id])
  faturas     Fatura[]

  @@map("assinaturas")
}

model Fatura {
  id              String        @id @default(cuid())
  assinaturaId    String
  numero          String?
  valor           Float
  dataEmissao     DateTime      @default(now())
  dataVencimento  DateTime?
  dataPagamento   DateTime?
  status          StatusFatura  @default(PENDENTE)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  assinatura      Assinatura    @relation(fields: [assinaturaId], references: [id])

  @@map("faturas")
}

enum UserRole {
  SUPER_ADMIN  // Admin do sistema
  ADMIN        // Admin da empresa
  USER         // Usuário comum
  MANAGER      // Gerente
}

enum StatusContrato {
  ATIVO
  INATIVO
  PAUSADO
  FINALIZADO
}

enum StatusRecorrencia {
  ATIVA
  INATIVA
}

enum Prioridade {
  BAIXA
  MEDIA
  ALTA
  URGENTE
}

enum StatusDemanda {
  ABERTA
  EM_ANDAMENTO
  PAUSADA
  CONCLUIDA
  CANCELADA
}

enum TipoMensagem {
  TEXTO
  ARQUIVO
  IMAGEM
}

enum PlanoCiclo {
  MENSAL
  TRIMESTRAL
  SEMESTRAL
  ANUAL
}

enum StatusPlano {
  ATIVO
  INATIVO
}

enum StatusAssinatura {
  ATIVA
  PENDENTE
  ATRASADA
  CANCELADA
}

enum StatusFatura {
  PENDENTE
  PAGA
  ATRASADA
  CANCELADA
}
