// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
  MANAGER
}

enum ClientStatus {
  LEAD
  PROSPECT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ContractStatus {
  DRAFT
  PENDING
  ACTIVE
  PAUSED
  CANCELLED
  TERMINATED
}

enum Cycle {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum ServiceCategory {
  APP
  SITE
  SYSTEM
  CONSULTING
  SUPPORT
  OTHER
}

enum ServiceStatus {
  PROPOSED
  IMPLEMENTATION
  ACTIVE
  PAUSED
  CANCELLED
  ARCHIVED
}

enum ServiceBillingStatus {
  PENDING
  ACTIVE
  PAUSED
  CANCELLED
  TERMINATED
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum ExpenseKind {
  OPERATING
  MARKETING
  PAYROLL
  TAX
  OTHER
}

enum Frequency {
  ONE_TIME
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(USER)
  empresaId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  empresa  Empresa?  @relation(fields: [empresaId], references: [id], onDelete: SetNull)
  sessions Session[]

  @@map("users")
}

model Empresa {
  id        String   @id @default(uuid())
  nome      String
  email     String   @unique
  telefone  String?
  endereco  String?
  cnpj      String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  usuarios User[]
  clients  Client[]

  @@map("empresas")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@map("sessions")
}

model Client {
  id         String       @id @default(uuid())
  empresaId  String?
  externalId String?      @unique
  name       String
  email      String?
  phone      String?
  status     ClientStatus @default(PROSPECT)
  meta       Json?
  tags       String[]     @default([])
  notes      String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  empresa           Empresa?           @relation(fields: [empresaId], references: [id], onDelete: SetNull)
  contacts          Contact[]
  contracts         Contract[]
  clientServices    ClientService[]
  invoices          Invoice[]
  domains           Domain[]
  recurringExpenses RecurringExpense[]
  expenses          Expense[]
  meetings          Meeting[]

  @@index([status])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("clients")
}

model Contact {
  id         String   @id @default(uuid())
  clientId   String
  externalId String?  @unique
  name       String
  email      String?
  phone      String?
  position   String?
  meta       Json?
  tags       String[] @default([])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([createdAt])
  @@map("contacts")
}

model Contract {
  id          String         @id @default(uuid())
  clientId    String
  externalId  String?        @unique
  reference   String?
  title       String
  description String?
  amount      Decimal?       @db.Decimal(12, 2)
  currency    String         @default("BRL")
  status      ContractStatus @default(DRAFT)
  signedAt    DateTime?
  startDate   DateTime?
  endDate     DateTime?
  meta        Json?
  tags        String[]       @default([])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  client         Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientServices ClientService[]

  @@index([clientId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@map("contracts")
}

model ServiceTemplate {
  id                String          @id @default(uuid())
  externalId        String?         @unique
  name              String
  category          ServiceCategory @default(OTHER)
  description       String?
  baseMonthlyFee    Decimal?        @db.Decimal(12, 2)
  setupFee          Decimal?        @db.Decimal(12, 2)
  defaultBillingCycle Cycle         @default(MONTHLY)
  deliverables      String?
  stack             String?
  meta              Json?
  tags              String[]        @default([])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  clientServices ClientService[]

  @@index([category])
  @@map("service_templates")
}

model ClientService {
  id               String         @id @default(uuid())
  clientId         String
  templateId       String?
  contractId       String?
  externalId       String?        @unique
  title            String
  scope            String?
  status           ServiceStatus  @default(PROPOSED)
  responsible      String?
  hostingProvider  String?
  repositoryUrls   String[]       @default([])
  environmentLinks Json?
  defaultMonthlyFee Decimal?      @db.Decimal(12, 2)
  currency         String         @default("BRL")
  billingCycle     Cycle          @default(MONTHLY)
  supportLevel     String?
  startDate        DateTime?
  goLiveDate       DateTime?
  endDate          DateTime?
  meta             Json?
  tags             String[]       @default([])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  client            Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  template          ServiceTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  contract          Contract?        @relation(fields: [contractId], references: [id], onDelete: SetNull)
  billings          ServiceBilling[]
  invoices          Invoice[]
  recurringExpenses RecurringExpense[]
  expenses          Expense[]

  @@index([clientId])
  @@index([status])
  @@index([templateId])
  @@index([contractId])
  @@map("client_services")
}

model ServiceBilling {
  id               String               @id @default(uuid())
  clientServiceId  String
  externalId       String?              @unique
  status           ServiceBillingStatus @default(PENDING)
  cycle            Cycle                @default(MONTHLY)
  startDate        DateTime             @default(now())
  endDate          DateTime?
  cancelledAt      DateTime?
  monthlyAmount    Decimal              @db.Decimal(12, 2)
  currency         String               @default("BRL")
  adjustmentIndex  Decimal?             @db.Decimal(6, 4)
  notes            String?
  meta             Json?
  tags             String[]             @default([])
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt

  clientService     ClientService      @relation(fields: [clientServiceId], references: [id], onDelete: Cascade)
  invoices          Invoice[]
  recurringExpenses RecurringExpense[]
  expenses          Expense[]

  @@index([clientServiceId])
  @@index([status])
  @@map("service_billings")
}

model Invoice {
  id               String        @id @default(uuid())
  clientId         String
  clientServiceId  String?
  serviceBillingId String?
  externalId       String?       @unique
  number           String?
  amount           Decimal       @db.Decimal(12, 2)
  currency         String        @default("BRL")
  status           InvoiceStatus @default(PENDING)
  issuedAt         DateTime      @default(now())
  dueDate          DateTime
  paidAt           DateTime?
  meta             Json?
  tags             String[]      @default([])
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  client         Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientService  ClientService? @relation(fields: [clientServiceId], references: [id], onDelete: SetNull)
  serviceBilling ServiceBilling? @relation(fields: [serviceBillingId], references: [id], onDelete: SetNull)
  expenses       Expense[]

  @@index([clientId])
  @@index([clientServiceId])
  @@index([serviceBillingId])
  @@index([status])
  @@index([dueDate])
  @@map("invoices")
}

model Domain {
  id         String    @id @default(uuid())
  clientId   String
  externalId String?   @unique
  name       String
  hostname   String
  registrar  String?
  expiresAt  DateTime?
  autoRenew  Boolean   @default(false)
  meta       Json?
  tags       String[]  @default([])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([expiresAt])
  @@index([hostname])
  @@map("domains")
}

model RecurringExpense {
  id               String      @id @default(uuid())
  clientId         String?
  clientServiceId  String?
  serviceBillingId String?
  externalId       String?     @unique
  title            String
  description      String?
  amount           Decimal     @db.Decimal(12, 2)
  currency         String      @default("BRL")
  kind             ExpenseKind @default(OPERATING)
  frequency        Frequency   @default(MONTHLY)
  nextOccurrence   DateTime?
  lastOccurrence   DateTime?
  meta             Json?
  tags             String[]    @default([])
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  client         Client?         @relation(fields: [clientId], references: [id], onDelete: SetNull)
  clientService  ClientService?  @relation(fields: [clientServiceId], references: [id], onDelete: SetNull)
  serviceBilling ServiceBilling? @relation(fields: [serviceBillingId], references: [id], onDelete: SetNull)
  expenses       Expense[]

  @@index([clientId])
  @@index([clientServiceId])
  @@index([serviceBillingId])
  @@index([frequency])
  @@index([nextOccurrence])
  @@map("recurring_expenses")
}

model Expense {
  id                 String      @id @default(uuid())
  clientId           String?
  clientServiceId    String?
  serviceBillingId   String?
  invoiceId          String?
  recurringExpenseId String?
  externalId         String?     @unique
  title              String
  description        String?
  amount             Decimal     @db.Decimal(12, 2)
  currency           String      @default("BRL")
  kind               ExpenseKind @default(OPERATING)
  incurredAt         DateTime    @default(now())
  meta               Json?
  tags               String[]    @default([])
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  client           Client?           @relation(fields: [clientId], references: [id], onDelete: SetNull)
  clientService    ClientService?    @relation(fields: [clientServiceId], references: [id], onDelete: SetNull)
  serviceBilling   ServiceBilling?   @relation(fields: [serviceBillingId], references: [id], onDelete: SetNull)
  invoice          Invoice?          @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  recurringExpense RecurringExpense? @relation(fields: [recurringExpenseId], references: [id], onDelete: SetNull)

  @@index([clientId])
  @@index([clientServiceId])
  @@index([serviceBillingId])
  @@index([invoiceId])
  @@index([kind])
  @@index([incurredAt])
  @@map("expenses")
}

model Meeting {
  id           String   @id @default(uuid())
  clientId     String
  externalId   String?  @unique
  title        String
  description  String?
  scheduledAt  DateTime
  durationMins Int?
  location     String?
  meta         Json?
  tags         String[] @default([])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([scheduledAt])
  @@map("meetings")
}
